filter {
        grok {
                # Match Access Tracking Log
	        match => { "message" => [ "\<%{INT}\>%{HOSTNAME:sender_hostname}\:\s\<%{GREEDYDATA}\>\s\[%{WORD:log_type}\|%{WORD:severity}\]\s%{GREEDYDATA:log_type_friendly}\stk\_username\=%{DATA:username}\,tk\_url\=%{GREEDYDATA:url}\,tk\_size\=%{INT:size}\,tk\_date\_field\=%{GREEDYDATA}\,tk\_protocol\=%{URIPROTO:protocol}\,tk\_mime\_content\=%{DATA:mime_type}\,tk\_server\=%{DATA}\,tk\_client\_ip\=%{IP:src_ip}\,tk\_server\_ip\=%{DATA:dst_ip}\,tk\_domain\=%{GREEDYDATA:url_domain}\,tk\_path\=%{GREEDYDATA:url_path}\,tk\_file\_name\=%{DATA:url_file_name}\,tk\_operation\=%{DATA:request_method}\,tk\_uid\=%{DATA:uid}\,tk\_category\=%{DATA:tk_category}\,tk\_category\_type\=%{DATA:site_category_type}" ]}
	        # Match Malware/Spyware Log
                match => { "message" => [ "\<%{INT}\>%{HOSTNAME:sender_hostname}\:\s\<%{GREEDYDATA}\>\s\[%{WORD:log_type}\|%{WORD:severity}\]\s%{GREEDYDATA:log_type_friendly}\stk\_username\=%{DATA:username}\,tk\_date\_field\=%{GREEDYDATA}\,tk\_protocol\=%{WORD:protocol}\,tk\_url\=%{DATA:url}\,tk\_malicious\_entity\=%{DATA:malicious_entity}\,tk\_file\_name\=%{DATA:malicious_file_name}\,tk\_entity\_name\=%{DATA:entity_name}\,tk\_action\=%{DATA:action}\,tk\_scan\_type\=%{DATA:scan_type}\,tk\_blocked\_by\=%{DATA:blocked_by}\,tk\_rule\_name\=%{DATA:rule_name}\,tk\_opp\_id\=%{INT}\,tk\_group\_name\=%{DATA:group_name}\,tk\_category\=%{DATA:virus_category}\,tk\_uid\=%{GREEDYDATA}" ]}
                # Match C&C Callback Log
                match => { "message" => [ "\<%{INT}\>%{HOSTNAME:sender}\:\s\<%{GREEDYDATA}\>\s\[%{DATA:log_type}\|%{DATA:severity}\]\s%{GREEDYDATA:log_type_friendly}\stk\_username\=%{DATA:username}\,tk\_date\_field\=%{GREEDYDATA}\,tk\_protocol\=%{WORD:protocol}\,tk\_url\=%{GREEDYDATA:url}\,tk\_domain\=%{GREEDYDATA:domain}\,tk\_device\_name\=%{GREEDYDATA}\,tk\_rule\_name\=%{GREEDYDATA:rule_name}\,tk\_group_name\=%{GREEDYDATA:group_name}\,tk\_client\_ip\=%{IP:src_ip}\,tk\_server\_ip\=%{IP:dst_ip}\,tk\_destination\_port\=%{INT:dst_port}\,tk\_ccca\_source\=%{INT:ccca_source}\,tk\_risk\_level\=%{INT:ccca_risk_level}\,tk\_filter\_action\=%{INT:ccca_filter_action}" ]}
        }

        # CIDR filter to match against private IP address ranges
        cidr {
                address => [ "%{[dst_ip]}" ]
                network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128","169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32" ]
                add_field => { "[dst_locality]" => "private" }
        }

        # If IP is private then drop it
        if [dst_locality] == "private" {
                drop {}
        }

        translate {
		field => "tk_category"
		destination => "[catagory]"
		override => false
		dictionary_path => "/etc/logstash/translation/site_categories.yml"
		fallback => "no match"
	}

        translate {
		field => "ccca_source"
		destination => "[c2_source]"
		override => false
		dictionary_path => "/etc/logstash/translation/ccca_source.yml"
		fallback => "no match"
	}

        translate {
		field => "ccca_risk_level"
		destination => "[c2_risk_level]"
		override => false
		dictionary_path => "/etc/logstash/translation/ccca_risk_level.yml"
		fallback => "no match"
	}

        translate {
		field => "ccca_filter_action"
		destination => "[c2_filter_action]"
		override => false
		dictionary_path => "/etc/logstash/translation/ccca_filter_action.yml"
		fallback => "no match"
	}

        geoip {
	        source => "dst_ip"
	}

        mutate {
                add_field => [ "received_at", "%{@timestamp}" ]
	        add_field => [ "received_from", "%{host}"]
                remove_field => [ "tk_category" ]
                remove_field => [ "ccca_source" ]
                remove_field => [ "ccca_risk_level" ]
                remove_field => [ "ccca_filter_action" ]
                convert => [ "size", "integer" ]
                convert => [ "ccca_source", "string" ]
                convert => [ "ccca_risk_level", "string" ]
                convert => [ "ccca_filter_action", "string" ]
        }

        if [url_path] == "/" {
                mutate {
                        remove_field => [ "url_path" ]
                }
        }

        if [url_file_name] == "-" {
                mutate {
                        remove_field => [ "url_file_path" ]
                }
        }

	date {
		match => ["syslog_timestamp", "MMM d HH:mm:ss", "MMM dd HH:mm:ss"]
	}
}
